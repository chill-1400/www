// //1 создание простой функции; 2 передача параметров
// function info(word) {
//   console.log("Привет?  " + word);
// }
//
// // info(" hi"); //вызов ф-ии
//
// function summa(a, b) {
//   var res = a + b;
//   console.log(res);
//   info(res);
// }
//
// summa(5, 7);


//3 функция для подсчёта суммы чисел; 4 возвращение ф-й. опер-р
 //return

// function summa(arr){
//   var sum = 0;
//
//   for(var i = 0; i < arr.length; i++){
//     sum += arr[i];
//   }
//
//   return sum;
// }
//
// var array = [6, 8, 1];
// var array_1 = [6, 8];
// var array_2 = [62, 83, 21, 12];
//
// var res = summa(array);
// res *= 2;
// console.log("Результат: " + res);
// summa(array_1);
// summa(array_2);



//4 локальные и глобальные переменные

// var num = 10; //а) глобальная переменная
// 
// function info() {
//   console.log(num);
// }
// 
// info();




var num = 9;// глобальная переменная

function info() {
  var num = 10; //б) локальная переменная
  console.log(num);
}

info();

console.log(num);




/*
Функции можно назвать небольшими подпрограммами, куда можно вынести повторяющийся код и обращаться к нему, когда это будет нужно. Функции значительно облегчают построение программ, так как нам не надо копировать однотипный код множество раз, а можно просто воспользоваться одной общей функцией.



Многие путают функции и методы и не понимают отличий между ними. На самом деле отличий нет, так как что методы, что функции являются одним и тем же. Функции что записаны вне классов называют функциями, а функции что записаны внутри классов называются методами. 



Точно такая же ситуация обстоит с переменным. В классах переменные называются полями, а вне классов - переменными.


В JS функции создаются при помощи ключевого слова function. Каждая функция может иметь какие-либо параметры или же не иметь их вовсе. Функции способны что-либо возвращать в ходе выполнения кода, если это требуется.



Создание функции
На основе всех данных наша функция будет выглядеть следующим образом:
function test() {
	console.log("Вывод чего-либо в консоль");
}
Функция выше не принимает никаких параметров и ничего не возвращает. Она просто пишет слово в консоль. Давайте разнообразим функцию и добавим параметр:

function test(word) {
	console.log(word);
}
Теперь функция принимает параметр, который будет отображен в консоли.



Если функция должна что-либо вернуть, то прописываем тип данных который будет возвращен. Для возвращения данных используем ключевое слово return:

function test(some_number) {
	some_number *= 2;
	return some_number;
}
Локальные и глобальные переменные
В JavaScript есть несколько полей видимости: локальная и глобальная. Если записать глобальную переменную, то такая переменная будем видна повсюду и с ней можно работать отовсюду в документе. Если записать локальную переменную, то такая переменная будет видна лишь в той области, где она записана.

Для создания глобальной переменной её необходимо прописать вне функции, класса или же объекта. Для создания локальных переменных вам достаточно поместить переменную в функцию. Переменная в функции будет видна лишь внутри блока с функцией и нигде более.
*/
