//1 создание интервалов

// var id = setInterval(my_func, 1000);
//
// var counter = 0;
// function my_func() {
//   counter++;
//   console.log("Counter: " + counter);
//
//   if(counter == 10)
//     clearInterval(id);
// }


//функция в качестве первого параметра
// var counter = 0;
// setInterval(function(){
//   counter++;
//   console.log("Second: " + counter);
// }, 1000);


//2 создание таймера

// setTimeout(function(){
//   console.log("Timer is working: прошло 3 сек");
// }, 3001);

//ещё можно так
 setTimeout(my_func, 3001);
   function my_func(){
 console.log("Timer is working: прошло 3 сек");
}










В JavaScript есть две функции, которые позволяют вызывать другие функции через определенное количество времени.



Использование интервалов
Интервалы записываются через метод setInterval(). Отличительная черта интервалов от таймеров заключается в способе вызова функции. Интервалы вызывают функцию постоянно через определенное количество секунд. Таймер вызывает функцию всего один раз, после чего прекращает свою работу.



Для создания интервалов используйте конструкцию:  

// Будет вызвана функция someFunction через 1.5 секунды
setInterval("someFunction()", 1500);

function someFunction() {
	console.log("Функция срабатывает каждые 1,5 секунды");
}
Чтобы остановить интервал его необходимо записать в переменную, после чего очистить данные:
// Ссылка на интервал записывается в переменную
var linkInterval = setInterval("someFunction()", 1500);

function someFunction() {
	console.log("Функция срабатывает каждые 1,5 секунды");
	// Для остановки используйте метод clearInterval
	clearInterval(linkInterval);
}


Использование таймеров
Здесь схожая структура, только вот таймер не нужно очищать, так как они срабатывают лишь один раз:

setTimeout("simple()", 1500);

function simple() {
	console.log("Функция будет вызвана лишь один раз через 1.5 секунды после старта программы");
}
За счёт этих функций вы можете откладывать выполнение других функций на определенное количество времени.