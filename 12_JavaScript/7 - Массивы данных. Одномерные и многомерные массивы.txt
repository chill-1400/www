//1 создание пустого массива; работа с элементами массива;
// методы для работы с arr
var arr = [5, true, "stroka", 5.7, 0, -100]; // добавл эл-ов
arr[0] = "word";
console.log(arr[0]);
console.log(arr.length);

//2 Многомерные массивы
var matrix = [
  [4, 8, 0], [5.7, 0], [true, "stroka"]
]

matrix[1][0] = 90;
console.log(matrix);



/*
Массивы позволяют хранить большой объем информации в одном месте. В языке JavaScript можно найти несколько основных типов массивов. 



Одномерный массив
Одномерный массив состоит из нескольких элементов, объединенных под одним именем. Чтобы создать массив необходимо создать переменную и присвоить ей значение new Array(). Внутри вы можете через запятую записывать различные значения, которые и будут элементами массива.



В массивах отсчет начинается с 0, поэтому первый элемент по индексу будет равен 0, второй - 1 и так далее.



Примеры создания массива:

var some = new Array(); // Создание пустого массива
some[0] = '1'; // Добавление 1 элемента
some[1] = 2; // Добавление 2 элемента
console.log(some[0]); // Вывод первого элемента
var array = new Array(1, 5, 2); // Создание массива со значениями сразу же
Работать с элементами массива можно точно как с переменными. Мы можем их выводить или же устанавливать для них новые значения.



Для массивов существует несколько дополнительных функций, которые ещё будут изучены в ходе курса. Сейчас был изучен лишь метод length, который позволяет получить длину всего массива.



Пример метода:

var elements = new Array(23, 6, 0, true, "Первый");
// Выведет значение 5, так как в массиве 5 элементов
console.log(elements.length);
Сперва массивы могут показаться бесполезными, но на самом деле это не так. В дальнейшем вы сможете понять всю важность массивов.



Многомерные массивы
Многомерный массив - это массив, в котором каждый элемент является другим массивом. На практике очень редко используются массивы с более чем третим уровнем вложенности. То есть массивы, в которых все элементы являются другими массивами и в котором все элементы также другие массивы встречаются очень и очень редко на практике.



Мы не будем изучать подобные массивы, так как принцип их построения точно такой же как при работе с двумерными массивами.



Для создания двумерных массивов необходимо использовать двойные квадратные скобки после типа данных. Выглядит такой массив как матрица, а записывается следующим образом:

var x = new Array(new Array(0, 34, 2), new Array(3, 4, 5));
console.log(x[0][1]); // Выведет 34

// Можно их сразу не присваивать
var symbols = new Array(new Array(), new Array());
symbols [0][1] = 'A';
Мы видим, что элементы первого массива являются другими массивами. Чтобы выбрать какой-либо объект используйте ту же структуру что и для одномерных массивов, вот только теперь указывайте индекс как первого массива, так и второго:

x[0][1] = 1; // Вместо 34 теперь будет 1
*/








/*
Поиск одинаковых чисел в массивах
Дано два массива чисел:

var array_1 = new Array(1, 2, 3, 5, 7, 9, 10);
var array_2 = new Array(1, 4, 3, 5, 8, 9, 0);
Необходимо вывести на экран все числа, которые одновременно присутствуют в обеих массивах.



Нужно сравнить каждое значение массива 1 с каждым значением массива 2. Т.е. сначала берем первый элемент массива 1 и сравниваем его со значениями массива 2. Если во втором массиве находится такое же число, то помещаем его в результирующую строку для последующего вывода на экран. Берем второй элемент массива 1 и сравниваем его со значениями из массива 2… И т.д. пока не будут пройдены все элементы массива 1.

Вот код решения:

var array_1 = new Array(1, 2, 3, 5, 7, 9, 10);
var array_2 = new Array(1, 4, 3, 5, 8, 9, 0);

 объявляем строковую переменную для результатов 
 
var str_res = '';
for (var i in array_1) {
	for (var j in array_2) {

		if (array_1[i] == array_2[j]) {
			* если значения совпали, то помещаем данное число 
			* в результирующую строку str_res
			* и после значения добавляем разделитель - '; ' 
			* точку с запятой и пробел,
			* чтобы наша результирующая строка красивей и 
			* читабельней выглядела на экране
			
			str_res += array_1[i] + '; ';
		}
	}
}
// выводим результирующую строку на экран
alert(str_res);
*/